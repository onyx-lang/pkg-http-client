#load "./module"
#load "./../json/module"

#library_path "./bin"

use core
#inject json.Use_Any_Encoder :: true

main :: () {
    //
    // Create a client for sending requests. This is not required,
    // but allows for customizations like custom headers, and
    // persistent cookies.
    client := http.client.Client.{};
    defer client->free();

    client.default_headers->add("user-agent", "onyx-http/0.1.1");

    {
        resp := client->get("https://httpbin.org/cookies/set", .[
            .{ "freeform", "ASDF" },
            .{ "onyx", "iscool" },
            .{ "http", "ishard" },
            .{ "s p a c e s", "a r e h a r d t o o" },
        ]);
        defer resp->free();
        printf("{*}\n", resp);
    }

    alloc.arena.auto_temp() {
        resp := http.client.request_builder(&client)
                ->set_url("https://httpbin.org/post")
                ->set_method(.Post)
                ->set_query("query", "work")
                ->add_form_value("test1", "foo")
                ->add_form_value("test2", "bar")
                ->add_form_value("test3", "baz")
                ->attach_file("test", "file.c", "text/plain", """#include <stdio.h>
int main() {
    printf("Hello, World!\\n");
}""")
                ->send();

        defer resp->free();
        printf("{*}\n", resp);
    }

    {
        resp := client->get("https://httpbin.org/cookies");
        defer resp->free();
        printf("{*}\n", resp);
    }

    {
        resp := client->get("https://httpbin.org/get", .[.{"arg", "1"}]);
        defer resp->free();
        printf("{*}\n", resp);
    }
}

