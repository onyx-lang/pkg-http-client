#load "module"

#library_path "./bin"

use core {*}
use http

main :: () {
    //
    // Create a client for sending requests. This is not required,
    // but allows for customizations like custom headers, and
    // persistent cookies.
    client := http.client.Client.{};
    defer client->free();

    //
    // Add some headers that will be attached to every request.
    client.default_headers->set("Accept", "*/*");
    client.default_headers->set("User-Agent", "onyx-http-client/0.0.1");

    //
    // Add a cookie that will be present on every request.
    client.cookies->set(.{ "test", "wow" });

    //
    // Create a new GET request for the provided API.
    req := client->new_request(.Get, "https://api.weatherapi.com/v1/forecast.json");
    defer req->free();

    //
    // Create a Query object that represents query parameters.
    // Also, set some query paramters.
    q := http.client.Query.{};
    defer q->free();

    q->set("key", "API KEY HERE");
    q->set("q",   "London, UK");
    req.url.rawQuery = q->encode();

    //
    // Send the request.
    resp := client->send(req);
    println(resp.status);
    defer resp->free();

    //
    // Old way of first converting to JSON,
    // then converting the result into a strcuture.
    //
    // Convert the result to JSON.
    // data := resp->as_json();
    // defer delete(data);

    //
    // Extract the JSON data to a structure.
    // c: current;
    // json.as_any(data.root["current"], &c);

    //
    // New way of converting the JSON result
    // directly into a structure and returning it.
    c := resp->as_json_into(weather);

    println(c);
}

weather :: struct {
    current: current;
}

current :: struct {
    temp_f: f32;
    wind_mph: f32;
    feelslike_f: f32;
}
