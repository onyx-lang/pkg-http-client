package http.client

use core {sync}

Client :: struct {
    transport: &Transport = &default_transport;

    default_headers: Headers = Headers.make();

    cookies: CookieJar = CookieJar.make();

    // 10 second timeout by default
    default_timeout := 10 * 1000;
}

#inject Client {
    free :: (c: &Client) {
        c.default_headers->free();
        c.cookies->free();
    }

    send :: (c: &Client, req: &Request) -> &Response {
        resp := c.transport->send_request(req);
        if !resp do return resp;
        
        if resp.headers->has("set-cookie") {
            c.cookies->ingress_from_headers(resp.headers);
        }

        return resp;
    }

    new_request :: #match {
        (c: &Client) -> &Request {
            req := http.client.new_request();
            req.headers = c.default_headers->clone();
            req.cookies = c.cookies->clone();
            req.timeout = c.default_timeout;
            return req;
        },

        (c: &Client, method: Method, url: str) -> &Request {
            req := http.client.new_request(method, url);
            req.headers = c.default_headers->clone();
            req.cookies = c.cookies->clone();
            req.timeout = c.default_timeout;
            return req;
        }
    }

    get :: #match {
        (c: &Client, url: str, query_params: [] QueryParam) -> &Response {
            q := Query.{};
            defer q->free();

            for & query_params do q->set(it.key, it.value);

            return c->get(url, &q);
        },

        (c: &Client, url: str, query: &Query = null) -> &Response {
            req := c->new_request(.Get, url);
            defer req->free();

            if query do req.url.rawQuery = query->encode();

            return c->send(req);
        },
    }

    post :: (c: &Client, url: str, content_type: str, data: [] u8) -> &Response {
        req := c->new_request(.Post, url);
        req.headers->set("content-type", content_type);
        req.body = data;

        defer req->free();

        return c->send(req);
    }
}




default_client: Client;
#local default_client_init_once: sync.Once
#local init_default_client :: () {
    default_client = .{};
}

get :: #match #local {}

#overload
get :: (url: str, query_params: [] QueryParam) -> &Response {
    default_client_init_once->exec(init_default_client);

    return default_client->get(url, query_params);
}

#overload
get :: (url: str, query: &Query = null) -> &Response {
    default_client_init_once->exec(init_default_client);

    return default_client->get(url, query);
}

post :: (url: str, content_type: str, data: [] u8) -> &Response {
    default_client_init_once->exec(init_default_client);

    return default_client->post(url, content_type, data);
}

