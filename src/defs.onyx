package http.client

use core { string, conv, array, iter }

Method :: enum {
    Options;
    Get;
    Head;
    Post;
    Put;
    Delete;
    Trace;
    Connect;
}

#inject Method {
    as_str :: (m: Method) => {
        switch m {
            case .Options do return "OPTIONS";
            case .Get     do return "GET";
            case .Head    do return "HAED";
            case .Post    do return "POST";
            case .Put     do return "PUT";
            case .Delete  do return "DELETE";
            case .Trace   do return "TRACE";
            case .Connect do return "CONNECT";
        }

        return "";
    }
}

// Currently, this library does not support HTTP2.
Protocol :: enum {
    Unknown;
    HTTP10;
    HTTP11;
}

#inject Protocol {
    as_str :: (p: Protocol) => {
        switch p {
            case .HTTP10 do return "HTTP/1.0";
            case .HTTP11 do return "HTTP/1.1";
        }

        return "";
    }
}

Url :: struct {
    protocol: Protocol;
    host: str;
    port: u32;
    resource: str;
    rawQuery: str;
    fragment: str;
}


#doc """
    Breaks down a url of the form, `(http://)host(:port)/resource[?query][#fragment]`,
    into its component parts. The host and resource string are sub-strings
    of the provided string, and therefore share the lifetime of the provided string.
"""
destructure_url :: (url: str) -> Url {
    protocol := Protocol.Unknown;
    host := "";
    port := 80;
    resource := "/";

    u := url;
    u', fragment := string.bisect(u, #char "#");
    u', query    := string.bisect(u, #char "?");

    if string.contains(u, "://") {
        switch string.read_until(^u, #char ":") {
            case "http" {
                // Assuming HTTP/1.1 when using 'http' protocol
                protocol = .HTTP11;
            }
        }

        string.advance(^u, 3);
    }

    host_and_port := string.read_until(^u, #char "/");
    if string.contains(host_and_port, #char "@") {
        // Currently, basic authentication in URL is not allowed.
        // I.e.  http://user:pass@host:port/
        return .{};
    }

    host', port_str := string.bisect(host_and_port, #char ":");
    if port_str {
        port = ~~ conv.parse_int(port_str);
    }

    if u do resource = u;

    return .{ protocol, host, port, resource, query, fragment };
}


urlencode :: (s: str, allocator := context.allocator) -> str {
    out := array.make(u8, s.count, allocator=allocator);

    for ch: s do switch ch {
        //
        // This list was taken from:
        // https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding
        match(#char ":", "%3A");
        match(#char "/", "%2F");
        match(#char "?", "%3F");
        match(#char "#", "%23");
        match(#char "[", "%5B");
        match(#char "]", "%5D");
        match(#char "@", "%40");
        match(#char "!", "%21");
        match(#char "$", "%24");
        match(#char "&", "%26");
        match(#char "'", "%27");
        match(#char "(", "%28");
        match(#char ")", "%29");
        match(#char "*", "%2A");
        match(#char "+", "%2B");
        match(#char ",", "%2C");
        match(#char ";", "%3B");
        match(#char "=", "%3D");
        match(#char "%", "%25");
        match(#char " ", "%20");

        case #default do out << ch;

        match :: macro (from: u8, to: str) {
            //
            // How's this for a one-liner
            case from do for to do out << it;
        }
    }

    return out;
}

urldecode :: #match #local {}

#overload
urldecode :: (s: str, allocator := context.allocator) -> str {
    buf := make([] u8, s.count, allocator);
    return urldecode(s, buf);
}

#overload
urldecode :: (s: str, buf: [] u8) -> str {
    c := 0;

    i := iter.as_iter(s);
    defer iter.close(i);

    for #no_close ch: i {
        if ch == #char "%" {
            a, e  := iter.take_one(i, no_close=true);
            b, e' := iter.take_one(i, no_close=true);

            n := u8.[a, b];

            v := conv.parse_int(n, base=16);
            switch v {
                match(0x3A, #char ":");
                match(0x2F, #char "/");
                match(0x3F, #char "?");
                match(0x23, #char "#");
                match(0x5B, #char "[");
                match(0x5D, #char "]");
                match(0x40, #char "@");
                match(0x21, #char "!");
                match(0x24, #char "$");
                match(0x26, #char "&");
                match(0x27, #char "'");
                match(0x28, #char "(");
                match(0x29, #char ")");
                match(0x2A, #char "*");
                match(0x2B, #char "+");
                match(0x2C, #char ",");
                match(0x3B, #char ";");
                match(0x3D, #char "=");
                match(0x25, #char "%");
                match(0x20, #char " ");

                match :: macro (from: i64, to: u8) {
                    case from { buf[c] = to; c += 1; }
                }
            }

        } elseif ch == #char "+" {
            buf[c] = #char " ";
            c += 1;
        } else {
            buf[c] = ch;
            c += 1;
        }
    }

    return buf.data[0 .. c];
}

Query :: struct {
    entries: [..] QueryEntry;
    encoded: str;
}

#local
QueryEntry :: struct {
    key, value: str; 
}

#inject Query {
    set :: (q: ^Query, key, value: str) {
        enc_key   := urlencode(key);
        enc_value := urlencode(value);

        for^ e: q.entries {
            if e.key == enc_key {
                delete(^e.value);
                delete(^enc_key);
                
                e.value = enc_value;
                return;
            }
        }

        q.entries << .{
            enc_key, enc_value
        };
    }

    free :: (q: ^Query) {
        for^ e: q.entries {
            delete(^e.key);
            delete(^e.value);
        }
        delete(^q.entries);

        if q.encoded {
            delete(^q.encoded);
        }
    }

    remove :: (q: ^Query, key: str) {
        enc_key := urlencode(key);

        for e: iter.as_iter(^q.entries) {
            if e.key == enc_key {
                delete(^e.key);
                delete(^e.value);
                #remove;
                break;
            }
        }

        delete(^enc_key);
    }

    encode :: (q: ^Query) -> str {
        if q.encoded {
            delete(^q.encoded);
        }

        res: [..] u8;
        for^ q.entries {
            string.concat(^res, it.key, "=", it.value, "&");
        }

        if res[res.count - 1] == #char "&" {
            res.count -= 1;
        }

        q.encoded = res;
        return q.encoded;
    }
}
